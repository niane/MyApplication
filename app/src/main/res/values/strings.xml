<resources>
    <!--<string name="app_name">My Application</string>-->

    <string name="person_name">孙骁骁</string>
    <string name="person_title">演员</string>
    <string name="person_intro">
        孙骁骁，1985年4月22日出生于重庆渝中区，主持人、演员，毕业于中国传媒大学播音与主持专业04级本科班。
        2007年进入湖南娱乐频道，主持娱乐节目《娱乐急先锋》。在《挑战麦克风》、《节节高声》、《快乐女声》等众多节目担任主持。
        2010年与马天宇主演《宝贝妈妈宝贝女》。2011年与郑恺、魏巍主演《我的青春在延安》。
        2013年10月4日，与沈怡、袁弘主演《真爱惹麻烦》，2013年9月28日与张翰、郑爽主演《胜女的代价2》 。
        2015年5月11日，李响单膝跪地求婚孙骁骁，孙骁骁飙泪点头。
        演绎经历:
        2007年4月底，孙骁骁通过湖南电视台娱乐频道在中国传媒大学的招聘并往长沙进行复试。通过复试后孙骁骁开始主持娱乐资讯类节目《娱乐急先锋》。
        2008年11月，孙骁骁接到了一个内部电话，这个电话来自湖南卫视演艺事业部，对方询问她是否愿意到湖南卫视做一档新节目。这档节目，就是《挑战麦克风》。《挑战麦克风》选中孙骁骁和马可、李好搭档，其实是看中了她的麦霸功底。
        2009年3月2日，在湖南卫视正式开播的《节节高声》栏目由孙骁骁和曹颖搭档。2009年03月12日，湖南卫视《挑战麦克风》第二季启播暨节目模式外销签约仪式在湖南国际影视会展中心举办。
        2011年6月，由孙骁骁、郑恺等主演的红色青春偶像剧《我的青春在延安》正式上映，献礼建党90周年。
        2013年10月20日，由欢瑞世纪出品，明道工作室制作，孙骁骁、张翰、郑爽、乔任梁、江语晨等主演的电视剧《胜女的代价2》在湖南卫视第一周播剧场收官。2013年12月6日由林心如、袁弘、孙骁骁等主演的古装巨制《秀丽江山之长歌行》杀青。同年与黄宗泽、戚薇等主演《少年神探狄仁杰》。
        2015年，主演《新济公活佛》中的单元剧《驭夫环》。</string>

    <string name="header_scrolling_view_behavior" translatable="false">com.yzg.myapplication.widgets.CoorHeaderViewLayout$ScrollingViewBehavior</string>

    <string name="test_txt">
        import android.content.Context;
        import android.content.res.TypedArray;
        import android.graphics.Color;
        import android.support.v4.view.MotionEventCompat;
        import android.support.v4.view.ViewCompat;
        import android.util.AttributeSet;
        import android.util.TypedValue;
        import android.view.MotionEvent;
        import android.view.View;
        import android.view.ViewConfiguration;
        import android.view.ViewGroup;
        import android.view.animation.Animation;
        import android.view.animation.DecelerateInterpolator;
        import android.view.animation.Interpolator;
        import android.view.animation.Transformation;
        import android.widget.AbsListView;
        import android.widget.ImageView;

        import java.security.InvalidParameterException;
        public class PullRefreshLayout extends ViewGroup {

            private static final float DECELERATE_INTERPOLATION_FACTOR = 2f;
            private static final int DRAG_MAX_DISTANCE = 64;
            private static final int INVALID_POINTER = -1;
            private static final float DRAG_RATE = .5f;

            public static final int STYLE_MATERIAL = 0;
            public static final int STYLE_CIRCLES = 1;
            public static final int STYLE_WATER_DROP = 2;
            public static final int STYLE_RING = 3;
            public static final int STYLE_SMARTISAN = 4;

            private View mTarget;
            private ImageView mRefreshView;
            private Interpolator mDecelerateInterpolator;
            private int mTouchSlop;
            private int mSpinnerFinalOffset;
            private int mTotalDragDistance;
            private RefreshDrawable mRefreshDrawable;
            private int mCurrentOffsetTop;
            private boolean mRefreshing;
            private int mActivePointerId;
            private boolean mIsBeingDragged;
            private float mInitialMotionY;
            private int mFrom;
            private boolean mNotify;
            private OnRefreshListener mListener;
            private int[] mColorSchemeColors;

            public int mDurationToStartPosition;
            public int mDurationToCorrectPosition;
            private int mInitialOffsetTop;
            private boolean mDispatchTargetTouchDown;
            private float mDragPercent;

            public PullRefreshLayout(Context context) {
                this(context, null);
            }

            public PullRefreshLayout(Context context, AttributeSet attrs) {
                super(context, attrs);
                TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.refresh_PullRefreshLayout);
                final int type = a.getInteger(R.styleable.refresh_PullRefreshLayout_refreshType, STYLE_MATERIAL);
                final int colorsId = a.getResourceId(R.styleable.refresh_PullRefreshLayout_refreshColors, 0);
                final int colorId = a.getResourceId(R.styleable.refresh_PullRefreshLayout_refreshColor, 0);
                a.recycle();

                mDecelerateInterpolator = new DecelerateInterpolator(DECELERATE_INTERPOLATION_FACTOR);
                mTouchSlop = ViewConfiguration.get(context).getScaledTouchSlop();
                int defaultDuration = getResources().getInteger(android.R.integer.config_mediumAnimTime);
                mDurationToStartPosition = defaultDuration;
                mDurationToCorrectPosition = defaultDuration;
                mSpinnerFinalOffset = mTotalDragDistance = dp2px(DRAG_MAX_DISTANCE);

                if (colorsId > 0) {
                    mColorSchemeColors = context.getResources().getIntArray(colorsId);
                } else {
                    mColorSchemeColors = new int[]{Color.rgb(0xC9, 0x34, 0x37), Color.rgb(0x37, 0x5B, 0xF1), Color.rgb(0xF7, 0xD2, 0x3E), Color.rgb(0x34, 0xA3, 0x50)};
                }

                if (colorId > 0) {
                    mColorSchemeColors = new int[]{context.getResources().getColor(colorId)};
                }

                mRefreshView = new ImageView(context);
                setRefreshStyle(type);
                mRefreshView.setVisibility(View.GONE);
                addView(mRefreshView, 0);
                setWillNotDraw(false);
                ViewCompat.setChildrenDrawingOrderEnabled(this, true);
            }

            public void setColorSchemeColors(int... colorSchemeColors) {
                mColorSchemeColors = colorSchemeColors;
                mRefreshDrawable.setColorSchemeColors(colorSchemeColors);
            }

            public void setColor(int color) {
                setColorSchemeColors(color);
            }

            public void setRefreshStyle(int type) {
                setRefreshing(false);
                switch (type) {
                    case STYLE_MATERIAL:
                        mRefreshDrawable = new MaterialDrawable(getContext(), this);
                        break;
                    case STYLE_CIRCLES:
                        mRefreshDrawable = new CirclesDrawable(getContext(), this);
                        break;
                    case STYLE_WATER_DROP:
                        mRefreshDrawable = new WaterDropDrawable(getContext(), this);
                        break;
                    case STYLE_RING:
                        mRefreshDrawable = new RingDrawable(getContext(), this);
                        break;
                    case STYLE_SMARTISAN:
                        mRefreshDrawable = new SmartisanDrawable(getContext(), this);
                        break;
                    default:
                        throw new InvalidParameterException("Type does not exist");
                }
                mRefreshDrawable.setColorSchemeColors(mColorSchemeColors);
                mRefreshView.setImageDrawable(mRefreshDrawable);
            }

            public void setRefreshDrawable(RefreshDrawable drawable) {
                setRefreshing(false);
                mRefreshDrawable = drawable;
                mRefreshDrawable.setColorSchemeColors(mColorSchemeColors);
                mRefreshView.setImageDrawable(mRefreshDrawable);
            }

            public int getFinalOffset() {
                return mSpinnerFinalOffset;
            }

            @Override
            protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                super.onMeasure(widthMeasureSpec, heightMeasureSpec);

                ensureTarget();
                if (mTarget == null)
                    return;

                widthMeasureSpec = MeasureSpec.makeMeasureSpec(getMeasuredWidth() - getPaddingRight() - getPaddingLeft(), MeasureSpec.EXACTLY);
                heightMeasureSpec = MeasureSpec.makeMeasureSpec(getMeasuredHeight() - getPaddingTop() - getPaddingBottom(), MeasureSpec.EXACTLY);
                mTarget.measure(widthMeasureSpec, heightMeasureSpec);
                mRefreshView.measure(widthMeasureSpec, heightMeasureSpec);
        //        mRefreshView.measure(MeasureSpec.makeMeasureSpec(mRefreshViewWidth, MeasureSpec.EXACTLY), MeasureSpec.makeMeasureSpec(mRefreshViewHeight, MeasureSpec.EXACTLY));
            }

            private void ensureTarget() {
                if (mTarget != null)
                    return;
                if (getChildCount() > 0) {
                    for (int i = 0; i less getChildCount(); i++) {
                        View child = getChildAt(i);
                        if (child != mRefreshView)
                            mTarget = child;
                    }
                }
            }

            @Override
            public boolean onInterceptTouchEvent(MotionEvent ev) {

                if (!isEnabled() || (canChildScrollUp() !mRefreshing)) {
                    return false;
                }

                final int action = MotionEventCompat.getActionMasked(ev);

                switch (action) {
                    case MotionEvent.ACTION_DOWN:
                        if (!mRefreshing) {
                            setTargetOffsetTop(0, true);
                        }
                        mActivePointerId = MotionEventCompat.getPointerId(ev, 0);
                        mIsBeingDragged = false;
                        final float initialMotionY = getMotionEventY(ev, mActivePointerId);
                        if (initialMotionY == -1) {
                            return false;
                        }
                        mInitialMotionY = initialMotionY;
                        mInitialOffsetTop = mCurrentOffsetTop;
                        mDispatchTargetTouchDown = false;
                        mDragPercent = 0;
                        break;
                    case MotionEvent.ACTION_MOVE:
                        if (mActivePointerId == INVALID_POINTER) {
                            return false;
                        }
                        final float y = getMotionEventY(ev, mActivePointerId);
                        if (y == -1) {
                            return false;
                        }
                        final float yDiff = y - mInitialMotionY;

                        break;
                    case MotionEvent.ACTION_UP:
                    case MotionEvent.ACTION_CANCEL:
                        mIsBeingDragged = false;
                        mActivePointerId = INVALID_POINTER;
                        break;
                    case MotionEventCompat.ACTION_POINTER_UP:
                        onSecondaryPointerUp(ev);
                        break;
                }

                return mIsBeingDragged;
            }

            @Override
            public boolean onTouchEvent(MotionEvent ev) {

                if (!mIsBeingDragged) {
                    return super.onTouchEvent(ev);
                }

                final int action = MotionEventCompat.getActionMasked(ev);

                switch (action) {
                    case MotionEvent.ACTION_MOVE: {
                        final int pointerIndex = MotionEventCompat.findPointerIndex(ev, mActivePointerId);
                        if (pointerIndex  0) {
                            return false;
                        }

                        final float y = MotionEventCompat.getY(ev, pointerIndex);
                        final float yDiff = y - mInitialMotionY;
                        int targetY;
                        if (mRefreshing) {
                            targetY = (int) (mInitialOffsetTop + yDiff);
                            if (canChildScrollUp()) {
                                targetY = -1;
                                mInitialMotionY = y;
                                mInitialOffsetTop = 0;
                                if (mDispatchTargetTouchDown) {
                                    mTarget.dispatchTouchEvent(ev);
                                } else {
                                    MotionEvent obtain = MotionEvent.obtain(ev);
                                    obtain.setAction(MotionEvent.ACTION_DOWN);
                                    mDispatchTargetTouchDown = true;
                                    mTarget.dispatchTouchEvent(obtain);
                                }
                            } else {
                                if (targetY  0) {
                                    if (mDispatchTargetTouchDown) {
                                        mTarget.dispatchTouchEvent(ev);
                                    } else {
                                        MotionEvent obtain = MotionEvent.obtain(ev);
                                        obtain.setAction(MotionEvent.ACTION_DOWN);
                                        mDispatchTargetTouchDown = true;
                                        mTarget.dispatchTouchEvent(obtain);
                                    }
                                    targetY = 0;
                                } else if (targetY > mTotalDragDistance) {
                                    targetY = mTotalDragDistance;
                                } else {
                                    if (mDispatchTargetTouchDown) {
                                        MotionEvent obtain = MotionEvent.obtain(ev);
                                        obtain.setAction(MotionEvent.ACTION_CANCEL);
                                        mDispatchTargetTouchDown = false;
                                        mTarget.dispatchTouchEvent(obtain);
                                    }
                                }
                            }
                        } else {
                            final float scrollTop = yDiff * DRAG_RATE;
                            float originalDragPercent = scrollTop / mTotalDragDistance;
                            if (originalDragPercent  0) {
                                return false;
                            }
                            mDragPercent = Math.min(1f, Math.abs(originalDragPercent));
                            float extraOS = Math.abs(scrollTop) - mTotalDragDistance;
                            float slingshotDist = mSpinnerFinalOffset;
                            float tensionSlingshotPercent = Math.max(0,
                                    Math.min(extraOS, slingshotDist * 2) / slingshotDist);
                            float tensionPercent = (float) ((tensionSlingshotPercent / 4) - Math.pow(
                                    (tensionSlingshotPercent / 4), 2)) * 2f;
                            float extraMove = (slingshotDist) * tensionPercent * 2;
                            targetY = (int) ((slingshotDist * mDragPercent) + extraMove);
                            if (mRefreshView.getVisibility() != View.VISIBLE) {
                                mRefreshView.setVisibility(View.VISIBLE);
                            }
                            if (scrollTop  mTotalDragDistance) {
                                mRefreshDrawable.setPercent(mDragPercent);
                            }
                        }
                        setTargetOffsetTop(targetY - mCurrentOffsetTop, true);
                        break;
                    }
                    case MotionEventCompat.ACTION_POINTER_DOWN:
                        final int index = MotionEventCompat.getActionIndex(ev);
                        mActivePointerId = MotionEventCompat.getPointerId(ev, index);
                        break;
                    case MotionEventCompat.ACTION_POINTER_UP:
                        onSecondaryPointerUp(ev);
                        break;
                    case MotionEvent.ACTION_UP:
                    case MotionEvent.ACTION_CANCEL: {
                        if (mActivePointerId == INVALID_POINTER) {
                            return false;
                        }
                        if (mRefreshing) {
                            if (mDispatchTargetTouchDown) {
                                mTarget.dispatchTouchEvent(ev);
                                mDispatchTargetTouchDown = false;
                            }
                            return false;
                        }
                        final int pointerIndex = MotionEventCompat.findPointerIndex(ev, mActivePointerId);
                        final float y = MotionEventCompat.getY(ev, pointerIndex);
                        final float overscrollTop = (y - mInitialMotionY) * DRAG_RATE;
                        mIsBeingDragged = false;
                        if (overscrollTop > mTotalDragDistance) {
                            setRefreshing(true, true);
                        } else {
                            mRefreshing = false;
                            animateOffsetToStartPosition();
                        }
                        mActivePointerId = INVALID_POINTER;
                        return false;
                    }
                }

                return true;
            }

            public void setDurations(int durationToStartPosition, int durationToCorrectPosition) {
                mDurationToStartPosition = durationToStartPosition;
                mDurationToCorrectPosition = durationToCorrectPosition;
            }

            private void animateOffsetToStartPosition() {
                mFrom = mCurrentOffsetTop;
                mAnimateToStartPosition.reset();
                mAnimateToStartPosition.setDuration(mDurationToStartPosition);
                mAnimateToStartPosition.setInterpolator(mDecelerateInterpolator);
                mAnimateToStartPosition.setAnimationListener(mToStartListener);
                mRefreshView.clearAnimation();
                mRefreshView.startAnimation(mAnimateToStartPosition);
            }

            private void animateOffsetToCorrectPosition() {
                mFrom = mCurrentOffsetTop;
                mAnimateToCorrectPosition.reset();
                mAnimateToCorrectPosition.setDuration(mDurationToCorrectPosition);
                mAnimateToCorrectPosition.setInterpolator(mDecelerateInterpolator);
                mAnimateToCorrectPosition.setAnimationListener(mRefreshListener);
                mRefreshView.clearAnimation();
                mRefreshView.startAnimation(mAnimateToCorrectPosition);
            }

            private final Animation mAnimateToStartPosition = new Animation() {
                @Override
                public void applyTransformation(float interpolatedTime, Transformation t) {
                    moveToStart(interpolatedTime);
                }
            };

            private final Animation mAnimateToCorrectPosition = new Animation() {
                @Override
                public void applyTransformation(float interpolatedTime, Transformation t) {
                    int endTarget = mSpinnerFinalOffset;
                    int targetTop = (mFrom + (int) ((endTarget - mFrom) * interpolatedTime));
                    int offset = targetTop - mTarget.getTop();
                    setTargetOffsetTop(offset, false /* requires update */);
                }
            };

            private void moveToStart(float interpolatedTime) {
                int targetTop = mFrom - (int) (mFrom * interpolatedTime);
                int offset = targetTop - mTarget.getTop();
                setTargetOffsetTop(offset, false);
                mRefreshDrawable.setPercent(mDragPercent * (1 - interpolatedTime));
            }

            public void setRefreshing(boolean refreshing) {
                if (mRefreshing != refreshing) {
                    setRefreshing(refreshing, false /* notify */);
                }
            }

            private void setRefreshing(boolean refreshing, final boolean notify) {
                if (mRefreshing != refreshing) {
                    mNotify = notify;
                    ensureTarget();
                    mRefreshing = refreshing;
                    if (mRefreshing) {
                        mRefreshDrawable.setPercent(1f);
                        animateOffsetToCorrectPosition();
                    } else {
                        animateOffsetToStartPosition();
                    }
                }
            }

            private Animation.AnimationListener mRefreshListener = new Animation.AnimationListener() {
                @Override
                public void onAnimationStart(Animation animation) {
                    mRefreshView.setVisibility(View.VISIBLE);
                }

                @Override
                public void onAnimationRepeat(Animation animation) {
                }

                @Override
                public void onAnimationEnd(Animation animation) {
                    if (mRefreshing) {
                        mRefreshDrawable.start();
                        if (mNotify) {
                            if (mListener != null) {
                                mListener.onRefresh();
                            }
                        }
                    } else {
                        mRefreshDrawable.stop();
                        mRefreshView.setVisibility(View.GONE);
                        animateOffsetToStartPosition();
                    }
                    mCurrentOffsetTop = mTarget.getTop();
                }
            };

            private Animation.AnimationListener mToStartListener = new Animation.AnimationListener() {
                @Override
                public void onAnimationStart(Animation animation) {
                    mRefreshDrawable.stop();
                }

                @Override
                public void onAnimationRepeat(Animation animation) {
                }

                @Override
                public void onAnimationEnd(Animation animation) {
        //            mRefreshDrawable.stop();
                    mRefreshView.setVisibility(View.GONE);
                    mCurrentOffsetTop = mTarget.getTop();
                }
            };

            private void onSecondaryPointerUp(MotionEvent ev) {
                final int pointerIndex = MotionEventCompat.getActionIndex(ev);
                final int pointerId = MotionEventCompat.getPointerId(ev, pointerIndex);
                if (pointerId == mActivePointerId) {
                    final int newPointerIndex = pointerIndex == 0 ? 1 : 0;
                    mActivePointerId = MotionEventCompat.getPointerId(ev, newPointerIndex);
                }
            }

            private float getMotionEventY(MotionEvent ev, int activePointerId) {
                final int index = MotionEventCompat.findPointerIndex(ev, activePointerId);
                if (index  0) {
                    return -1;
                }
                return MotionEventCompat.getY(ev, index);
            }

            private void setTargetOffsetTop(int offset, boolean requiresUpdate) {
        //        mRefreshView.bringToFront();
                mTarget.offsetTopAndBottom(offset);
                mCurrentOffsetTop = mTarget.getTop();
                mRefreshDrawable.offsetTopAndBottom(offset);
                if (requiresUpdate  android.os.Build.VERSION.SDK_INT  11) {
                    invalidate();
                }
            }

            private boolean canChildScrollUp() {
                if (android.os.Build.VERSION.SDK_INT  14) {
                    if (mTarget instanceof AbsListView) {
                        final AbsListView absListView = (AbsListView) mTarget;
                        return absListView.getChildCount() > 0
                                 (absListView.getFirstVisiblePosition() > 0 || absListView.getChildAt(0)
                                .getTop()  absListView.getPaddingTop());
                    } else {
                        return mTarget.getScrollY() > 0;
                    }
                } else {
                    return ViewCompat.canScrollVertically(mTarget, -1);
                }
            }

            @Override
            protected void onLayout(boolean changed, int l, int t, int r, int b) {

                ensureTarget();
                if (mTarget == null)
                    return;

                int height = getMeasuredHeight();
                int width = getMeasuredWidth();
                int left = getPaddingLeft();
                int top = getPaddingTop();
                int right = getPaddingRight();
                int bottom = getPaddingBottom();

                mTarget.layout(left, top + mTarget.getTop(), left + width - right, top + height - bottom + mTarget.getTop());
                mRefreshView.layout(left, top, left + width - right, top + height - bottom);
            }

            private int dp2px(int dp) {
                return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, getContext().getResources().getDisplayMetrics());
            }

            public void setOnRefreshListener(OnRefreshListener listener) {
                mListener = listener;
            }

            public static interface OnRefreshListener {
                public void onRefresh();
            }
        }
    </string>

</resources>
